<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Blog s</title>
    <link>https://rcalsaverini.github.io/blog/</link>
    <description>Recent content in Blogs on Blog s</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 20 Jan 2019 22:00:00 -0200</lastBuildDate>
    
	<atom:link href="https://rcalsaverini.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A few frustrations with Python&#39;s type annotation system</title>
      <link>https://rcalsaverini.github.io/blog/2019-01-20-frustrations-with-mypy/</link>
      <pubDate>Sun, 20 Jan 2019 22:00:00 -0200</pubDate>
      
      <guid>https://rcalsaverini.github.io/blog/2019-01-20-frustrations-with-mypy/</guid>
      <description>I have on and off again tried to use mypy to type check my python code, but some shortcomings of Python&#39;s type annotation system really get in the way. This came now because I needed to write code involving trees that had to change the types of values stored on the nodes. This highlighted a few serious shortcomings for anyone that is accostumed to use stronger type systems.
The ugly syntax for function types is annoying but there are worse problems Yes, writing Callable[[Callable[[A], B], F[A]], F[B]] instead of (a -&amp;gt; b) -&amp;gt; f a -&amp;gt; f b as in Haskell or (A =&amp;gt; B, F[A]) =&amp;gt; F[B] (or maybe the uncurried (A =&amp;gt; B) =&amp;gt; (F[A] =&amp;gt; F[B]) version) as in Scala is really annoying.</description>
    </item>
    
    <item>
      <title>Einstein&#39;s racist diaries</title>
      <link>https://rcalsaverini.github.io/blog/2018-06-12-einstein-racist-diary/</link>
      <pubDate>Tue, 12 Jun 2018 21:00:00 -0300</pubDate>
      
      <guid>https://rcalsaverini.github.io/blog/2018-06-12-einstein-racist-diary/</guid>
      <description>This is a thought motivated by the current story about racist and xenophobic remarks found in Albert Einstein&#39;s personal diaries.
People are morally flawed. There are no ethical heroes that escape this fact. Every role model of the past have some shitty secrets for us to uncover. If we could read the minds of any of our heroes we would find scandalous things that would shock us.
With high probability, many contemporaneous humanitarians and humanistic heroes shared the shocking thoughts we abhor from Einstein&#39;s diaries.</description>
    </item>
    
    <item>
      <title>Type safe records as an excuse to learn type level programming in Haskell</title>
      <link>https://rcalsaverini.github.io/blog/2018-02-12-type-safe-records/</link>
      <pubDate>Mon, 12 Feb 2018 22:00:00 -0200</pubDate>
      
      <guid>https://rcalsaverini.github.io/blog/2018-02-12-type-safe-records/</guid>
      <description>I&#39;ve been recently trying to learn more advanced type-level constructs in Haskell and was very happy to find this amazing talk by Prof. Stephanie Weirich about Dependent Types in haskell. This talk helped me to understand deeper a few more recent concepts introduced by some of GHC&#39;s extensions and how to use them. In this post I want to focus a little bit in a simplified version of one of the data structures Prof.</description>
    </item>
    
    <item>
      <title>Operational Semantics for Monads</title>
      <link>https://rcalsaverini.github.io/blog/2010-08-25-operational-semantics/</link>
      <pubDate>Wed, 25 Aug 2010 21:00:00 -0300</pubDate>
      
      <guid>https://rcalsaverini.github.io/blog/2010-08-25-operational-semantics/</guid>
      <description>Disclaimer: this is an old blog post from a very old wordpress blog and may contain inacuracies. I reproduced it as is for sentimental reasons. I may revisit this theme later.
While randomly browsing around on Planet Haskell I&#39;ve found a post on Heinrich Apfelmus&amp;rsquo; blog about something called &amp;ldquo;operational semantics&amp;rdquo; for monads. Found it very iluminating. Basically it&#39;s a form to implement monads focusing not on defining the bind and return operators, but on what the monad is really supposed to do.</description>
    </item>
    
    <item>
      <title>Stochastic Processes as Monad Transformers</title>
      <link>https://rcalsaverini.github.io/blog/2010-08-03-stochastic-processes/</link>
      <pubDate>Tue, 03 Aug 2010 00:00:00 -0300</pubDate>
      
      <guid>https://rcalsaverini.github.io/blog/2010-08-03-stochastic-processes/</guid>
      <description>Disclaimer: this is an old blog post from a very old wordpress blog and may contain inacuracies. I reproduced it as is for sentimental reasons. I may revisit this theme later.
I have a difficulty to understand functional programming concepts that I can’t put to some very simple and natural use (natural for me, of course). I need to find the perfect simple example to implement to finally understand something. And I’m not a computer scientist, so things like parsers and compilers have very little appeal to me (probably because I don’t understand them…).</description>
    </item>
    
  </channel>
</rss>